# sources:
# 1. https://dart.dev/tools/analysis
# 2. https://dart.dev/tools/linter-rules

# https://github.com/flutter/packages/tree/main/packages/flutter_lints
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "build/**"
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  language:
    # never implicitly casts from dynamic to a more specific type
    strict-casts: true
    # never chooses the dynamic type when it can’t determine a static type
    strict-raw-types: true
    # chooses the dynamic type when it can’t determine a static type due to
    # omitted type arguments
    strict-inference: true
linter:
  rules:
    # Errors
    - always_use_package_imports
    - avoid_dynamic_calls
    - avoid_slow_async_io
    - avoid_type_to_string
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - deprecated_member_use_from_same_package
    # - diagnostic_describe_all_properties
    - discarded_futures
    - implicit_reopen
    # - invalid_case_patterns
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_self_assignments
    - no_wildcard_variable_uses
    # - prefer_relative_imports # vs always_use_package_imports
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unsafe_html

    # Style
    - always_declare_return_types
    - always_put_control_body_on_new_line # style guide for the flutter repo
    - always_put_required_named_parameters_first
    # clarification: it is reasonable to define a type only where it is not obvious
    # (declaring a variable with assigning the return value from a function).
    # - always_specify_types # style guide for the flutter repo (vs omit_local_variable_types)
    - annotate_redeclares
    # - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members # Effective Dart
    # docs: When compiled to JS, integer values are represented as floats.
    # That can lead to some unexpected behavior when using either is or is!
    # where the type is either int or double.
    - avoid_double_and_int_checks # ? - it's worth considering if it's necessary
    - avoid_equals_and_hash_code_on_mutable_classes # Effective Dart
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters # vs prefer_final_parameters
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    # If a function has only one boolean parameter,
    # it makes no sense to make the parameter named
    # - avoid_positional_boolean_parameters
    # - avoid_private_typedef_functions # ?
    - avoid_redundant_argument_values
    - avoid_returning_this # ?
    - avoid_setters_without_getters
    - avoid_types_on_closure_parameters # vs always_specify_types
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - combinators_ordering
    - conditional_uri_does_not_exist
    - dangling_library_doc_comments
    - deprecated_consistency
    - directives_ordering # Effective Dart
    - do_not_use_environment
    - eol_at_end_of_file # ?
    - flutter_style_todos # Flutter Style
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_annotations
    - lines_longer_than_80_chars
    - matching_super_parameters
    - missing_whitespace_between_adjacent_strings
    - no_default_cases
    - no_literal_bool_comparisons
    - no_runtimeType_toString
    - noop_primitive_operations
    # clarification: it is reasonable to define a type only where it is not obvious
    # (declaring a variable with assigning the return value from a function).
    # - omit_local_variable_types # vs always_specify_types
    - one_member_abstracts
    - only_throw_errors
    # - package_api_docs # ?
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_constructors_over_static_methods
    # - prefer_double_quotes # vs prefer_single_quotes
    # often annoying
    # - prefer_expression_function_bodies
    - prefer_final_in_for_each
    - prefer_final_locals
    # - prefer_final_parameters # vs avoid_final_parameters
    - prefer_foreach
    - prefer_if_elements_to_conditional_expressions
    # - prefer_int_literals
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_single_quotes # vs prefer_double_quotes
    # - public_member_api_docs # ?
    - require_trailing_commas
    - sized_box_shrink_expand
    - sort_constructors_first
    - sort_unnamed_constructors_first
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_literal_in_constant_pattern # ?
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_breaks
    # - unnecessary_final vs prefer_final_locals, prefer_final_parameters
    - unnecessary_lambdas
    - unnecessary_library_directive
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_checks
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_to_list_in_spreads
    - unreachable_from_main
    # - use_colored_box # TODO: add comment
    - use_decorated_box
    - use_enums
    - use_if_null_to_convert_nulls_to_bools # Effective Dart
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_setters_to_change_properties
    - use_string_buffers
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable # Effective Dart

    # Pub
    - secure_pubspec_urls
    - sort_pub_dependencies
